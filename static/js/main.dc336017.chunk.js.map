{"version":3,"sources":["components/api/BASE_API.ts","components/api/API.ts","components/global/globalFunc.ts","components/page/Weather/Weather.tsx","components/page/Forecast/Forecast.tsx","App.tsx","index.tsx"],"names":["BASE_API_URL","get","a","url","fetch","then","response","json","catch","console","log","key","currentWeather","state","type","urlPar","undefined","position","latitude","longitude","search","getReq","loadData","API","kInC","temp","toFixed","changeHour","hour","actualDate","Date","getHours","getMinutes","App","props","data","isLoading","this","func","setState","prevProps","prevState","snapshot","searchProps","className","message","name","sys","country","weather","main","src","icon","alt","temp_max","temp_min","description","clouds","all","sunrise","sunset","humidity","pressure","coord","lat","lon","wind","speed","size","React","Component","Forecast","rowKey","columns","title","dataIndex","render","param","newDate","month","getMonth","date","getDate","hours","toString","length","children","city","dataSource","list","dt","showModal","visible","handleOk","getLocation","handleCancel","navigator","geolocation","getCurrentPosition","coords","Search","Input","TabPane","Tabs","placeholder","onSearch","value","enterButton","onClick","defaultActiveKey","tab","Weather","onOk","onCancel","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.dc336017.chunk.js","sourcesContent":["const BASE_API_URL = \"https://api.openweathermap.org/data/2.5/\";\r\n\r\nexport const get = async (url = {}) => {\r\n  return await fetch(BASE_API_URL + url)\r\n    .then(response => response.json())\r\n    .catch(response => console.log(response));\r\n};\r\n","import { get } from \"./BASE_API\";\r\n\r\nconst key: string = \"&appid=0d4f1a1310b951add6f65e6076f63cbc\";\r\n\r\nexport const currentWeather = async (state: any, type: string) => {\r\n  let urlPar;\r\n  if(type === 'weather'){\r\n    if (state.position !== undefined) {\r\n      urlPar = `${type}?lat=${state.position.latitude}&lon=${state.position.longitude}${key}`;\r\n    } else {\r\n      urlPar = `${type}?q=${state.search}${key}`;\r\n    }\r\n  } else if (type === 'forecast'){\r\n    if (state.position !== undefined) {\r\n      urlPar = `${type}?lat=${state.position.latitude}&lon=${state.position.longitude}${key}`;\r\n    } else {\r\n      urlPar = `${type}?q=${state.search}${key}`;\r\n    }\r\n  }\r\n  let getReq = await get(urlPar);\r\n  return getReq;\r\n};\r\n\r\n","import * as API from \"../api/API\";\r\n\r\nexport const loadData = async (state: object, type: string) => {\r\n  return await API.currentWeather(state, type);\r\n};\r\n\r\nexport const kInC = (temp: number) => {\r\n  const actual: number = temp - 273.15;\r\n  return actual.toFixed(2);\r\n};\r\n\r\nexport const changeHour = (hour: number) => {\r\n  const actualDate: any = new Date(hour * 1000);\r\n  const actualHour: number = actualDate.getHours();\r\n  const actualMinutes: number = actualDate.getMinutes();\r\n  return actualHour + \":\" + actualMinutes;\r\n};\r\n","import React from \"react\";\r\nimport { Spin } from \"antd\";\r\nimport * as func from \"../../global/globalFunc\";\r\n\r\nclass App extends React.Component<any, any> {\r\n  constructor(props: object) {\r\n    super(props);\r\n    this.state = {\r\n      data: undefined,\r\n      search: this.props.search.search,\r\n      isLoading: false,\r\n      position: undefined,\r\n      type: 'weather'\r\n    };\r\n  }\r\n\r\n  public async componentDidMount() {\r\n    const state = this.state;\r\n    const data = await func.loadData(state, 'weather');\r\n    this.setState({\r\n      data,\r\n      isLoading: true\r\n    });\r\n  }\r\n\r\n  public async componentDidUpdate(\r\n    prevProps: Readonly<object>,\r\n    prevState: Readonly<object>,\r\n    snapshot?: object\r\n  ) {\r\n    const {position, search, type} = this.state;\r\n    const searchProps = this.props.search;\r\n\r\n    if (search !== searchProps.search) {\r\n      const data = await func.loadData(searchProps, type);\r\n      this.setState({\r\n        data,\r\n        isLoading: true,\r\n        search: searchProps.search\r\n      });\r\n    } else if (position !== searchProps.position) {\r\n      const data = await func.loadData(searchProps, type);\r\n      this.setState({\r\n        data,\r\n        isLoading: true,\r\n        position: searchProps.position\r\n      });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const { data, isLoading } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"one-day\">\r\n          {isLoading ? (\r\n            data.message ? (\r\n              <p>{data.message}</p>\r\n            ) : (\r\n              <div className=\"weather-day\">\r\n                <h1>\r\n                  Weather today in {data.name}, country: {data.sys.country}\r\n                </h1>\r\n                <table>\r\n                  <thead>\r\n                    <tr className=\"no-tr\">\r\n                      <td>\r\n                        <p>{data.weather[0].main}</p>\r\n                      </td>\r\n                      <td>\r\n                        <img\r\n                          src={`//openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`}\r\n                          alt={data.weather[0].icon}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr className=\"no-tr\">\r\n                      <td>\r\n                        <p>Temp</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{func.kInC(data.main.temp)} °C</p>\r\n                      </td>\r\n                    </tr>\r\n                    <tr className=\"no-tr\">\r\n                      <td>\r\n                        <p>Temp max</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{func.kInC(data.main.temp_max)} °C</p>\r\n                      </td>\r\n                    </tr>\r\n                    <tr className=\"no-tr\">\r\n                      <td>\r\n                        <p>Temp min</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{func.kInC(data.main.temp_min)} °C</p>\r\n                      </td>\r\n                    </tr>\r\n                    <tr className=\"no-tr\">\r\n                      <td>\r\n                        <p>Weather</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{data.weather[0].description}</p>\r\n                      </td>\r\n                    </tr >\r\n                    <tr className=\"no-tr\">\r\n                      <td>\r\n                        <p>Clouds</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{data.clouds.all}%</p>\r\n                      </td>\r\n                    </tr>\r\n                    <tr className=\"no-tr\">\r\n                      <td>\r\n                        <p>Sunrise</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{func.changeHour(data.sys.sunrise)}</p>\r\n                      </td>\r\n                    </tr>\r\n                    <tr className=\"no-tr\">\r\n                      <td>\r\n                        <p>Sunset</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{func.changeHour(data.sys.sunset)}</p>\r\n                      </td>\r\n                    </tr>\r\n                    <tr className=\"no-tr\">\r\n                      <td>\r\n                        <p>Humidity</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{data.main.humidity}%</p>\r\n                      </td>\r\n                    </tr>\r\n                    <tr className=\"no-tr\">\r\n                      <td>\r\n                        <p>Pressure</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{data.main.pressure}hpa</p>\r\n                      </td>\r\n                    </tr>\r\n                    <tr className=\"no-tr\">\r\n                      <td>\r\n                        <p>Geo coords</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>\r\n                          [{data.coord.lat}, {data.coord.lon}]\r\n                        </p>\r\n                      </td>\r\n                    </tr>\r\n                    <tr className=\"no-tr\">\r\n                      <td>\r\n                        <p>Wind speed</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{data.wind.speed}m/s</p>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )\r\n          ) : (\r\n            <div>\r\n              <Spin size=\"large\" />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import * as React from \"react\";\r\nimport { Spin, Table } from \"antd\";\r\nimport * as func from \"../../global/globalFunc\";\r\nimport './index.css'\r\n\r\nclass Forecast extends React.Component<any, any> {\r\n  constructor(props: object) {\r\n    super(props);\r\n    this.state = {\r\n      position: undefined,\r\n      data: undefined,\r\n      search: this.props.search.search,\r\n      isLoading: false,\r\n      rowKey: 1,\r\n      type: 'forecast'\r\n    };\r\n  }\r\n\r\n  public async componentDidMount() {\r\n    const {type} = this.state;\r\n    const data = await func.loadData(this.state, type);\r\n    this.setState({\r\n      data,\r\n      isLoading: true\r\n    });\r\n  }\r\n\r\n  public async componentDidUpdate(\r\n    prevProps: Readonly<object>,\r\n    prevState: Readonly<object>,\r\n    snapshot?: object\r\n  ) {\r\n    const {position, search, type} = this.state;\r\n    const searchProps = this.props.search;\r\n\r\n    if (search !== searchProps.search) {\r\n      const data = await func.loadData(searchProps, type);\r\n      this.setState({\r\n        data,\r\n        isLoading: true,\r\n        search: searchProps.search\r\n      });\r\n    } else if (position !== searchProps.position) {\r\n      const data = await func.loadData(searchProps, type);\r\n      this.setState({\r\n        data,\r\n        isLoading: true,\r\n        position: searchProps.position\r\n      });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const { data, isLoading } = this.state;\r\n    const columns = [\r\n      {\r\n        title: \"Date\",\r\n        dataIndex: \"dt_txt\",\r\n        render: (param: string) => {\r\n          const newDate = new Date(param);\r\n          const month = newDate.getMonth();\r\n          const date = newDate.getDate();\r\n          let hours: number|string = newDate.getHours();\r\n          if (hours.toString().length < 2) {\r\n            hours = 0 + hours.toString();\r\n          }\r\n          return {\r\n            children: `Month: ${month}, Day: ${date}, Hour: ${hours}`\r\n          };\r\n        }\r\n      },\r\n      {\r\n        title: \"\",\r\n        dataIndex: \"weather[0].icon\",\r\n        render: (param: number | string) => {\r\n          let temp = `//openweathermap.org/img/wn/${param}@2x.png`;\r\n\r\n          return <img src={temp} alt={temp} />;\r\n        }\r\n      },\r\n      {\r\n        title: \"Temp\",\r\n        dataIndex: \"main.temp\",\r\n        render: (param: number) => {\r\n          let temp = func.kInC(param);\r\n          return {\r\n            children: `${temp} °C`\r\n          };\r\n        }\r\n      },\r\n      {\r\n        title: \"Pressure\",\r\n        dataIndex: \"main.pressure\",\r\n        render: (param: number) => {\r\n          return {\r\n            children: `${param} hpa`\r\n          };\r\n        }\r\n      },\r\n      {\r\n        title: \"Humidity\",\r\n        dataIndex: \"main.humidity\",\r\n        render: (param: number) => {\r\n          return {\r\n            children: `${param}%`\r\n          };\r\n        }\r\n      },\r\n      {\r\n        title: \"Weather\",\r\n        dataIndex: \"weather[0].main\"\r\n      },\r\n      {\r\n        title: \"Clouds\",\r\n        dataIndex: \"clouds.all\",\r\n        render: (param: number) => {\r\n          return {\r\n            children: `${param}%`\r\n          };\r\n        }\r\n      },\r\n      {\r\n        title: \"Wind\",\r\n        dataIndex: \"wind.speed\",\r\n        render: (param: number) => {\r\n          return {\r\n            children: `${param} m/s`\r\n          };\r\n        }\r\n      },\r\n      {\r\n        title: \"Rain\",\r\n        dataIndex: \"rain.3h\",\r\n        render: (param: number | string) => {\r\n          if (param === undefined) {\r\n            param = \"none\";\r\n          } else {\r\n            param = `${param} mm`;\r\n          }\r\n          return {\r\n            children: `${param}`\r\n          };\r\n        }\r\n      },\r\n      {\r\n        title: \"Snow\",\r\n\r\n        dataIndex: \"snow.3h\",\r\n        render: (param: number | string) => {\r\n          if (param === undefined) {\r\n            param = \"none\";\r\n          } else {\r\n            param = `${param} mm`;\r\n          }\r\n          return {\r\n            children: `${param}`\r\n          };\r\n        }\r\n      }\r\n    ];\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"one-day\">\r\n          {isLoading ? (\r\n            <div  className='table-forecast'>\r\n              <h1>\r\n                Weather today in {data.city.name}, country: {data.city.country}\r\n              </h1>\r\n              <Table\r\n\r\n                columns={columns}\r\n                dataSource={data.list}\r\n                rowKey={rowKey => rowKey.dt}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              {\" \"}\r\n              <Spin size=\"large\" />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Forecast;\r\n","import React from \"react\";\r\nimport Weather from \"./components/page/Weather/Weather\";\r\nimport { Input, Button, Tabs, Modal } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport Forecast from \"./components/page/Forecast/Forecast\";\r\n\r\nclass App extends React.Component<any, any> {\r\n  constructor(props: object) {\r\n    super(props);\r\n    this.state = {\r\n      search: 'Lviv',\r\n      position: undefined,\r\n      isLoading: false,\r\n      visible: false\r\n    };\r\n  }\r\n\r\n  public showModal = () => {\r\n    this.setState({\r\n      visible: true\r\n    });\r\n  };\r\n  public handleOk = () => {\r\n    this.getLocation();\r\n    this.setState({\r\n      visible: false\r\n    });\r\n  };\r\n  private handleCancel = () => {\r\n    this.setState({\r\n      visible: false\r\n    });\r\n  };\r\n\r\n  public getLocation = async () => {\r\n    if (navigator.geolocation) {\r\n      await navigator.geolocation.getCurrentPosition(async (position: any) => {\r\n          let state = await position.coords;\r\n        this.setState({\r\n          position: state\r\n        });\r\n      });\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  public render() {\r\n    const { Search } = Input;\r\n    const { TabPane } = Tabs;\r\n    const { visible } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n          <div className=\"nav\">\r\n              <Search\r\n                  placeholder=\"search your city\"\r\n                  onSearch={value => {\r\n                      this.setState({\r\n                          search: value,\r\n                          isLoading: false,\r\n                          position: undefined\r\n                      });\r\n                  }}\r\n                  enterButton\r\n              />\r\n              <Button type=\"primary\" icon=\"compass\" onClick={this.showModal} />\r\n          </div>\r\n        <Tabs defaultActiveKey=\"1\" className=\"tabs\">\r\n          <TabPane tab=\"One day\" key=\"1\" >\r\n            <Weather search={this.state} />\r\n          </TabPane>\r\n          <TabPane tab=\"Five day\" key=\"2\" >\r\n            <Forecast search={this.state} />\r\n          </TabPane>\r\n        </Tabs>\r\n        <Modal\r\n          title=\"Your coordinates\"\r\n          visible={visible}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n        >\r\n          <p>\r\n            If you want to give us access to your location to determine the\r\n            weather in your location.\r\n          </p>\r\n          <p>Then click OK</p>\r\n          <p>If not, click Cancel</p>\r\n          <p>\r\n            You can use the search to find out the weather in a particular city\r\n          </p>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}