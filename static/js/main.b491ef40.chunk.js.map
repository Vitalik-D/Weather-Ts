{"version":3,"sources":["components/api/BASE_API.ts","components/api/API.ts","components/global/globalFunc.ts","components/page/Weather.tsx","components/page/Forecast.tsx","App.tsx","index.tsx"],"names":["BASE_API_URL","get","a","url","fetch","then","response","json","catch","console","log","key","currentWeather","state","urlPar","undefined","position","latitude","longitude","search","getReq","currentForecast","loadData","API","loadDataForecast","kInC","temp","toFixed","changeHour","hour","actualDate","Date","getHours","getMinutes","App","props","data","isLoading","this","func","setState","prevProps","prevState","snapshot","className","message","name","sys","country","weather","main","src","icon","alt","temp_max","temp_min","description","clouds","all","sunrise","sunset","humidity","pressure","coord","lat","lon","wind","speed","size","React","Component","Forecast","rowKey","columns","title","dataIndex","render","param","newDate","month","getMonth","date","getDate","hours","toString","length","children","city","dataSource","list","dt","showModal","visible","handleOk","getLocation","handleCancel","navigator","geolocation","getCurrentPosition","coords","Search","Input","TabPane","Tabs","placeholder","onSearch","value","enterButton","type","onClick","defaultActiveKey","tab","Weather","onOk","onCancel","ReactDOM","document","getElementById"],"mappings":"8RAAMA,G,MAAe,4CAERC,EAAG,uCAAG,wCAAAC,EAAA,6DAAOC,EAAP,+BAAa,GAAb,SACJC,MAAMJ,EAAeG,GAC/BE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAF,GAAQ,OAAIG,QAAQC,IAAIJ,MAHhB,mFAAH,qDCAVK,EAAc,0CAIPC,EAAc,uCAAG,WAAOC,GAAP,iBAAAX,EAAA,6DAG1BY,OADqBC,IAAnBF,EAAMG,SACF,UALc,UAKd,gBAAqBH,EAAMG,SAASC,SAApC,gBAAoDJ,EAAMG,SAASE,WAAnE,OAA+EP,GAE/E,UAPc,UAOd,cAAmBE,EAAMM,QAAzB,OAAkCR,GALd,SAOTV,EAAIa,GAPK,cAOxBM,EAPwB,yBAQrBA,GARqB,2CAAH,sDAWdC,EAAe,uCAAG,WAAOR,GAAP,iBAAAX,EAAA,6DAG3BY,OADqBC,IAAnBF,EAAMG,SACF,UAjBe,WAiBf,gBAAsBH,EAAMG,SAASC,SAArC,gBAAqDJ,EAAMG,SAASE,WAApE,OAAgFP,GAEhF,UAnBe,WAmBf,cAAoBE,EAAMM,QAA1B,OAAmCR,GALd,SAOVV,EAAIa,GAPM,cAOzBM,EAPyB,yBAQtBA,GARsB,2CAAH,sDCffE,EAAQ,uCAAG,WAAOT,GAAP,SAAAX,EAAA,sEACTqB,EAAmBV,GADV,mFAAH,sDAIRW,EAAgB,uCAAG,WAAOX,GAAP,SAAAX,EAAA,sEACjBqB,EAAoBV,GADH,mFAAH,sDAIhBY,EAAO,SAACC,GAEnB,OADuBA,EAAO,QAChBC,QAAQ,IAGXC,EAAa,SAACC,GACzB,IAAMC,EAAkB,IAAIC,KAAY,IAAPF,GAGjC,OAF2BC,EAAWE,WAElB,IADUF,EAAWG,cCkK5BC,E,YA9Kb,WAAYC,GAAa,IAAD,8BACtB,4CAAMA,KACDtB,MAAQ,CACXuB,UAAMrB,EACNI,OAAQ,EAAKgB,MAAMhB,OAAOA,OAC1BkB,WAAW,EACXrB,cAAUD,GANU,E,0MAWhBF,EAAQyB,KAAKzB,M,SACA0B,EAAc1B,G,OAA3BuB,E,OACNE,KAAKE,SAAS,CACZJ,OACAC,WAAW,I,wLAKbI,EACAC,EACAC,G,4EAEIL,KAAKzB,MAAMM,SAAWmB,KAAKH,MAAMhB,OAAOA,O,gCACvBoB,EAAcD,KAAKH,MAAMhB,Q,OAAtCiB,E,OACNE,KAAKE,SAAS,CACZJ,OACAC,WAAW,EACXlB,OAAQmB,KAAKH,MAAMhB,OAAOA,S,0BAEnBmB,KAAKzB,MAAMG,WAAasB,KAAKH,MAAMhB,OAAOH,S,kCAChCuB,EAAcD,KAAKH,MAAMhB,Q,QAAtCiB,E,OACNE,KAAKE,SAAS,CACZJ,OACAC,WAAW,EACXrB,SAAUsB,KAAKH,MAAMhB,OAAOH,W,2IAKjB,IAAD,EACcsB,KAAKzB,MAAzBuB,EADM,EACNA,KAAMC,EADA,EACAA,UACd,OACE,yBAAKO,UAAU,OACb,yBAAKA,UAAU,WACZP,EACCD,EAAKS,QACH,2BAAIT,EAAKS,SAET,6BACE,gDACoBT,EAAKU,KADzB,cAC0CV,EAAKW,IAAIC,SAEnD,+BACE,+BACE,4BACE,4BACE,2BAAIZ,EAAKa,QAAQ,GAAGC,OAEtB,4BACE,yBACEC,IAAG,sCAAiCf,EAAKa,QAAQ,GAAGG,KAAjD,WACHC,IAAKjB,EAAKa,QAAQ,GAAGG,UAK7B,+BACE,4BACE,4BACE,oCAEF,4BACE,2BAAIb,EAAUH,EAAKc,KAAKxB,MAAxB,YAGJ,4BACE,4BACE,wCAEF,4BACE,2BAAIa,EAAUH,EAAKc,KAAKI,UAAxB,YAGJ,4BACE,4BACE,wCAEF,4BACE,2BAAIf,EAAUH,EAAKc,KAAKK,UAAxB,YAGJ,4BACE,4BACE,uCAEF,4BACE,2BAAInB,EAAKa,QAAQ,GAAGO,eAGxB,4BACE,4BACE,sCAEF,4BACE,2BAAIpB,EAAKqB,OAAOC,IAAhB,OAGJ,4BACE,4BACE,uCAEF,4BACE,2BAAInB,EAAgBH,EAAKW,IAAIY,YAGjC,4BACE,4BACE,sCAEF,4BACE,2BAAIpB,EAAgBH,EAAKW,IAAIa,WAGjC,4BACE,4BACE,wCAEF,4BACE,2BAAIxB,EAAKc,KAAKW,SAAd,OAGJ,4BACE,4BACE,wCAEF,4BACE,2BAAIzB,EAAKc,KAAKY,SAAd,SAGJ,4BACE,4BACE,0CAEF,4BACE,+BACI1B,EAAK2B,MAAMC,IADf,KACsB5B,EAAK2B,MAAME,IADjC,OAKJ,4BACE,4BACE,0CAEF,4BACE,2BAAI7B,EAAK8B,KAAKC,MAAd,YAQZ,6BACE,kBAAC,IAAD,CAAMC,KAAK,iB,GAtKPC,IAAMC,W,4CC+KTC,E,YA9Kb,WAAYpC,GAAa,IAAD,8BACtB,4CAAMA,KACDtB,MAAQ,CACXG,cAAUD,EACVqB,UAAMrB,EACNI,OAAQ,EAAKgB,MAAMhB,OAAOA,OAC1BkB,WAAW,EACXmC,OAAQ,GAPY,E,iNAYHjC,EAAsBD,KAAKzB,O,OAAxCuB,E,OACNE,KAAKE,SAAS,CACZJ,OACAC,WAAW,I,wLAKbI,EACAC,EACAC,G,4EAEIL,KAAKzB,MAAMM,SAAWmB,KAAKH,MAAMhB,OAAOA,O,gCACvBoB,EAAsBD,KAAKH,MAAMhB,Q,OAA9CiB,E,OACNE,KAAKE,SAAS,CACZJ,OACAC,WAAW,EACXlB,OAAQmB,KAAKH,MAAMhB,OAAOA,S,0BAEnBmB,KAAKzB,MAAMG,WAAasB,KAAKH,MAAMhB,OAAOH,S,kCAChCuB,EAAsBD,KAAKH,MAAMhB,Q,QAA9CiB,E,OACNE,KAAKE,SAAS,CACZJ,OACAC,WAAW,EACXrB,SAAUsB,KAAKH,MAAMhB,OAAOH,W,2IAKjB,IAAD,EACcsB,KAAKzB,MAAzBuB,EADM,EACNA,KAAMC,EADA,EACAA,UACRoC,EAAU,CACd,CACEC,MAAO,OACPC,UAAW,SACXC,OAAQ,SAACC,GACP,IAAMC,EAAU,IAAI/C,KAAK8C,GACnBE,EAAQD,EAAQE,WAChBC,EAAOH,EAAQI,UACjBC,EAAaL,EAAQ9C,WAIzB,OAHImD,EAAMC,WAAWC,OAAS,IAC5BF,EAAQ,EAAIA,EAAMC,YAEb,CACLE,SAAS,UAAD,OAAYP,EAAZ,kBAA2BE,EAA3B,mBAA0CE,MAIxD,CACET,MAAO,GACPC,UAAW,kBACXC,OAAQ,SAACC,GACP,IAAInD,EAAI,sCAAkCmD,EAAlC,WAER,OAAO,uBAAK1B,IAAKzB,EAAM2B,IAAK3B,MAGhC,CACEgD,MAAO,OACPC,UAAW,YACXC,OAAQ,SAACC,GACP,IAAInD,EAAOa,EAAUsC,GACrB,MAAO,CACLS,SAAS,GAAD,OAAK5D,EAAL,aAId,CACEgD,MAAO,WACPC,UAAW,gBACXC,OAAQ,SAACC,GACP,MAAO,CACLS,SAAS,GAAD,OAAKT,EAAL,WAId,CACEH,MAAO,WACPC,UAAW,gBACXC,OAAQ,SAACC,GACP,MAAO,CACLS,SAAS,GAAD,OAAKT,EAAL,QAId,CACEH,MAAO,UACPC,UAAW,mBAEb,CACED,MAAO,SACPC,UAAW,aACXC,OAAQ,SAACC,GACP,MAAO,CACLS,SAAS,GAAD,OAAKT,EAAL,QAId,CACEH,MAAO,OACPC,UAAW,aACXC,OAAQ,SAACC,GACP,MAAO,CACLS,SAAS,GAAD,OAAKT,EAAL,WAId,CACEH,MAAO,OACPC,UAAW,UACXC,OAAQ,SAACC,GAMP,OAJEA,OADY9D,IAAV8D,EACM,OAEH,UAAMA,EAAN,OAEA,CACLS,SAAS,GAAD,OAAKT,MAInB,CACEH,MAAO,OACPC,UAAW,UACXC,OAAQ,SAACC,GAMP,OAJEA,OADY9D,IAAV8D,EACM,OAEH,UAAMA,EAAN,OAEA,CACLS,SAAS,GAAD,OAAKT,OAKrB,OACE,uBAAKjC,UAAU,OACb,uBAAKA,UAAU,WACZP,EACC,gCACE,8CACoBD,EAAKmD,KAAKzC,KAD9B,cAC+CV,EAAKmD,KAAKvC,SAEzD,gBAAC,IAAD,CACEyB,QAASA,EACTe,WAAYpD,EAAKqD,KACjBjB,OAAQ,SAAAA,GAAM,OAAIA,EAAOkB,OAI7B,2BACG,IACD,gBAAC,IAAD,CAAMtB,KAAK,iB,GAtKFC,aC2FRnC,E,YAzFb,WAAYC,GAAa,IAAD,8BACtB,4CAAMA,KASDwD,UAAY,WACjB,EAAKnD,SAAS,CACZoD,SAAS,KAZW,EAejBC,SAAW,WAChB,EAAKC,cACL,EAAKtD,SAAS,CACZoD,SAAS,KAlBW,EAqBhBG,aAAe,WACrB,EAAKvD,SAAS,CACZoD,SAAS,KAvBW,EA2BjBE,YA3BiB,sBA2BH,sBAAA5F,EAAA,0DACf8F,UAAUC,YADK,gCAEXD,UAAUC,YAAYC,mBAAtB,uCAAyC,WAAOlF,GAAP,eAAAd,EAAA,sEAC3Bc,EAASmF,OADkB,OACzCtF,EADyC,OAE7C,EAAK2B,SAAS,CACZxB,SAAUH,IAHiC,2CAAzC,uDAFW,sDASV,MATU,2CAzBnB,EAAKA,MAAQ,CACXM,OAAQ,OACRH,cAAUD,EACVsB,WAAW,EACXuD,SAAS,GANW,E,sEAwCP,IAAD,OACNQ,EAAWC,IAAXD,OACAE,EAAYC,IAAZD,QAER,OACE,yBAAK1D,UAAU,OACX,yBAAKA,UAAU,OACX,kBAACwD,EAAD,CACII,YAAY,mBACZC,SAAU,SAAAC,GACN,EAAKlE,SAAS,CACVrB,OAAQuF,EACRrE,WAAW,EACXrB,cAAUD,KAGlB4F,aAAW,IAEf,kBAAC,IAAD,CAAQC,KAAK,UAAUxD,KAAK,UAAUyD,QAASvE,KAAKqD,aAE1D,kBAAC,IAAD,CAAMmB,iBAAiB,KACrB,kBAACR,EAAD,CAASS,IAAI,UAAUpG,IAAI,KACzB,kBAACqG,EAAD,CAAS7F,OAAQmB,KAAKzB,SAExB,kBAACyF,EAAD,CAASS,IAAI,WAAWpG,IAAI,KAC1B,kBAAC,EAAD,CAAUQ,OAAQmB,KAAKzB,UAG3B,kBAAC,IAAD,CACE6D,MAAM,mBACNkB,QAAStD,KAAKzB,MAAM+E,QACpBqB,KAAM3E,KAAKuD,SACXqB,SAAU5E,KAAKyD,cAEf,wHAIA,4CACA,mDACA,wG,GAjFQ1B,IAAMC,WCDxB6C,IAASvC,OAAO,kBAAC,EAAD,MAASwC,SAASC,eAAe,W","file":"static/js/main.b491ef40.chunk.js","sourcesContent":["const BASE_API_URL = \"https://api.openweathermap.org/data/2.5/\";\r\n\r\nexport const get = async (url = {}) => {\r\n  return await fetch(BASE_API_URL + url)\r\n    .then(response => response.json())\r\n    .catch(response => console.log(response));\r\n};\r\n","import { get } from \"./BASE_API\";\r\n\r\nconst key: string = \"&appid=0d4f1a1310b951add6f65e6076f63cbc\";\r\nconst forecast: string = \"forecast\";\r\nconst weather: string = \"weather\";\r\n\r\nexport const currentWeather = async (state: any) => {\r\n  let urlPar;\r\n  if (state.position !== undefined) {\r\n    urlPar = `${weather}?lat=${state.position.latitude}&lon=${state.position.longitude}${key}`;\r\n  } else {\r\n    urlPar = `${weather}?q=${state.search}${key}`;\r\n  }\r\n  let getReq = await get(urlPar);\r\n  return getReq;\r\n};\r\n\r\nexport const currentForecast = async (state: any) => {\r\n  let urlPar;\r\n  if (state.position !== undefined) {\r\n    urlPar = `${forecast}?lat=${state.position.latitude}&lon=${state.position.longitude}${key}`;\r\n  } else {\r\n    urlPar = `${forecast}?q=${state.search}${key}`;\r\n  }\r\n  let getReq = await get(urlPar);\r\n  return getReq;\r\n};\r\n","import * as API from \"../api/API\";\r\n\r\nexport const loadData = async (state: any) => {\r\n  return await API.currentWeather(state);\r\n};\r\n\r\nexport const loadDataForecast = async (state: any) => {\r\n  return await API.currentForecast(state);\r\n};\r\n\r\nexport const kInC = (temp: any) => {\r\n  const actual: number = temp - 273.15;\r\n  return actual.toFixed(2);\r\n};\r\n\r\nexport const changeHour = (hour: any) => {\r\n  const actualDate: any = new Date(hour * 1000);\r\n  const actualHour: number = actualDate.getHours();\r\n  const actualMinutes: number = actualDate.getMinutes();\r\n  return actualHour + \":\" + actualMinutes;\r\n};\r\n","import React from \"react\";\r\nimport { Spin } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport * as func from \"../global/globalFunc\";\r\n\r\nclass App extends React.Component<any, any> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      data: undefined,\r\n      search: this.props.search.search,\r\n      isLoading: false,\r\n      position: undefined\r\n    };\r\n  }\r\n\r\n  public async componentDidMount() {\r\n    const state = this.state;\r\n    const data = await func.loadData(state);\r\n    this.setState({\r\n      data,\r\n      isLoading: true\r\n    });\r\n  }\r\n\r\n  public async componentDidUpdate(\r\n    prevProps: Readonly<any>,\r\n    prevState: Readonly<any>,\r\n    snapshot?: any\r\n  ) {\r\n    if (this.state.search !== this.props.search.search) {\r\n      const data = await func.loadData(this.props.search);\r\n      this.setState({\r\n        data,\r\n        isLoading: true,\r\n        search: this.props.search.search\r\n      });\r\n    } else if (this.state.position !== this.props.search.position) {\r\n      const data = await func.loadData(this.props.search);\r\n      this.setState({\r\n        data,\r\n        isLoading: true,\r\n        position: this.props.search.position\r\n      });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const { data, isLoading } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"one-day\">\r\n          {isLoading ? (\r\n            data.message ? (\r\n              <p>{data.message}</p>\r\n            ) : (\r\n              <div>\r\n                <h1>\r\n                  Weather today in {data.name}, country: {data.sys.country}\r\n                </h1>\r\n                <table>\r\n                  <thead>\r\n                    <tr>\r\n                      <td>\r\n                        <p>{data.weather[0].main}</p>\r\n                      </td>\r\n                      <td>\r\n                        <img\r\n                          src={`//openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`}\r\n                          alt={data.weather[0].icon}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>\r\n                        <p>Temp</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{func.kInC(data.main.temp)} °C</p>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <p>Temp max</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{func.kInC(data.main.temp_max)} °C</p>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <p>Temp min</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{func.kInC(data.main.temp_min)} °C</p>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <p>Weather</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{data.weather[0].description}</p>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <p>Clouds</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{data.clouds.all}%</p>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <p>Sunrise</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{func.changeHour(data.sys.sunrise)}</p>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <p>Sunset</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{func.changeHour(data.sys.sunset)}</p>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <p>Humidity</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{data.main.humidity}%</p>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <p>Pressure</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{data.main.pressure}hpa</p>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <p>Geo coords</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>\r\n                          [{data.coord.lat}, {data.coord.lon}]\r\n                        </p>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <p>Wind speed</p>\r\n                      </td>\r\n                      <td>\r\n                        <p>{data.wind.speed}m/s</p>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )\r\n          ) : (\r\n            <div>\r\n              <Spin size=\"large\" />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import * as React from \"react\";\r\nimport { Spin, Table } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport * as func from \"../global/globalFunc\";\r\n\r\nclass Forecast extends React.Component<any, any> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      position: undefined,\r\n      data: undefined,\r\n      search: this.props.search.search,\r\n      isLoading: false,\r\n      rowKey: 1\r\n    };\r\n  }\r\n\r\n  public async componentDidMount() {\r\n    const data = await func.loadDataForecast(this.state);\r\n    this.setState({\r\n      data,\r\n      isLoading: true\r\n    });\r\n  }\r\n\r\n  public async componentDidUpdate(\r\n    prevProps: Readonly<any>,\r\n    prevState: Readonly<any>,\r\n    snapshot?: any\r\n  ) {\r\n    if (this.state.search !== this.props.search.search) {\r\n      const data = await func.loadDataForecast(this.props.search);\r\n      this.setState({\r\n        data,\r\n        isLoading: true,\r\n        search: this.props.search.search\r\n      });\r\n    } else if (this.state.position !== this.props.search.position) {\r\n      const data = await func.loadDataForecast(this.props.search);\r\n      this.setState({\r\n        data,\r\n        isLoading: true,\r\n        position: this.props.search.position\r\n      });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const { data, isLoading } = this.state;\r\n    const columns = [\r\n      {\r\n        title: \"Date\",\r\n        dataIndex: \"dt_txt\",\r\n        render: (param: any) => {\r\n          const newDate = new Date(param);\r\n          const month = newDate.getMonth();\r\n          const date = newDate.getDate();\r\n          let hours: any = newDate.getHours();\r\n          if (hours.toString().length < 2) {\r\n            hours = 0 + hours.toString();\r\n          }\r\n          return {\r\n            children: `Month: ${month}, Day: ${date}, Hour: ${hours}`\r\n          };\r\n        }\r\n      },\r\n      {\r\n        title: \"\",\r\n        dataIndex: \"weather[0].icon\",\r\n        render: (param: number | string) => {\r\n          let temp = `//openweathermap.org/img/wn/${param}@2x.png`;\r\n\r\n          return <img src={temp} alt={temp} />;\r\n        }\r\n      },\r\n      {\r\n        title: \"Temp\",\r\n        dataIndex: \"main.temp\",\r\n        render: (param: number) => {\r\n          let temp = func.kInC(param);\r\n          return {\r\n            children: `${temp} °C`\r\n          };\r\n        }\r\n      },\r\n      {\r\n        title: \"Pressure\",\r\n        dataIndex: \"main.pressure\",\r\n        render: (param: number) => {\r\n          return {\r\n            children: `${param} hpa`\r\n          };\r\n        }\r\n      },\r\n      {\r\n        title: \"Humidity\",\r\n        dataIndex: \"main.humidity\",\r\n        render: (param: number) => {\r\n          return {\r\n            children: `${param}%`\r\n          };\r\n        }\r\n      },\r\n      {\r\n        title: \"Weather\",\r\n        dataIndex: \"weather[0].main\"\r\n      },\r\n      {\r\n        title: \"Clouds\",\r\n        dataIndex: \"clouds.all\",\r\n        render: (param: number) => {\r\n          return {\r\n            children: `${param}%`\r\n          };\r\n        }\r\n      },\r\n      {\r\n        title: \"Wind\",\r\n        dataIndex: \"wind.speed\",\r\n        render: (param: number) => {\r\n          return {\r\n            children: `${param} m/s`\r\n          };\r\n        }\r\n      },\r\n      {\r\n        title: \"Rain\",\r\n        dataIndex: \"rain.3h\",\r\n        render: (param: number | string) => {\r\n          if (param === undefined) {\r\n            param = \"none\";\r\n          } else {\r\n            param = `${param} mm`;\r\n          }\r\n          return {\r\n            children: `${param}`\r\n          };\r\n        }\r\n      },\r\n      {\r\n        title: \"Snow\",\r\n        dataIndex: \"snow.3h\",\r\n        render: (param: number | string) => {\r\n          if (param === undefined) {\r\n            param = \"none\";\r\n          } else {\r\n            param = `${param} mm`;\r\n          }\r\n          return {\r\n            children: `${param}`\r\n          };\r\n        }\r\n      }\r\n    ];\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"one-day\">\r\n          {isLoading ? (\r\n            <>\r\n              <h1>\r\n                Weather today in {data.city.name}, country: {data.city.country}\r\n              </h1>\r\n              <Table\r\n                columns={columns}\r\n                dataSource={data.list}\r\n                rowKey={rowKey => rowKey.dt}\r\n              />\r\n            </>\r\n          ) : (\r\n            <div>\r\n              {\" \"}\r\n              <Spin size=\"large\" />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Forecast;\r\n","import React from \"react\";\nimport Weather from \"./components/page/Weather\";\nimport { Input, Button, Tabs, Modal } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport Forecast from \"./components/page/Forecast\";\n\nclass App extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      search: \"Lviv\",\n      position: undefined,\n      isLoading: false,\n      visible: false\n    };\n  }\n\n  public showModal = () => {\n    this.setState({\n      visible: true\n    });\n  };\n  public handleOk = () => {\n    this.getLocation();\n    this.setState({\n      visible: false\n    });\n  };\n  private handleCancel = () => {\n    this.setState({\n      visible: false\n    });\n  };\n\n  public getLocation = async () => {\n    if (navigator.geolocation) {\n      await navigator.geolocation.getCurrentPosition(async (position: any) => {\n        let state = await position.coords;\n        this.setState({\n          position: state\n        });\n      });\n    } else {\n      return null;\n    }\n  };\n\n  public render() {\n    const { Search } = Input;\n    const { TabPane } = Tabs;\n\n    return (\n      <div className=\"App\">\n          <div className=\"nav\">\n              <Search\n                  placeholder=\"search your city\"\n                  onSearch={value => {\n                      this.setState({\n                          search: value,\n                          isLoading: false,\n                          position: undefined\n                      });\n                  }}\n                  enterButton\n              />\n              <Button type=\"primary\" icon=\"compass\" onClick={this.showModal} />\n          </div>\n        <Tabs defaultActiveKey=\"1\">\n          <TabPane tab=\"One day\" key=\"1\">\n            <Weather search={this.state} />\n          </TabPane>\n          <TabPane tab=\"Five day\" key=\"2\">\n            <Forecast search={this.state} />\n          </TabPane>\n        </Tabs>\n        <Modal\n          title=\"Your coordinates\"\n          visible={this.state.visible}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n        >\n          <p>\n            If you want to give us access to your location to determine the\n            weather in your location.\n          </p>\n          <p>Then click OK</p>\n          <p>If not, click Cancel</p>\n          <p>\n            You can use the search to find out the weather in a particular city\n          </p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}